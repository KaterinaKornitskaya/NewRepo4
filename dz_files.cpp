// dz_files.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <cstdio>


/*
 Завдання 1. Дано два текстові файли. З'ясувати, чи збігаються їхні рядки.
 Якщо ні, то вивести рядок, який не збігається, з кожного файлу.

*/
int main1()
{
    FILE* f;
    FILE* f1;
    f = fopen("file1.txt", "rt");        // открытие файла (изначально прописала wt, 
                                         //  записала файл, потом изменила на rt)
    f1 = fopen("file2.txt", "rt");       // открытие файла (изначально прописала wt,
                                         //  записала файл, потом изменила на rt)
    if (f == NULL) {                     // после попытки открытия проверить успешность
        std::cout << "File1 open error\n";
        return -1;
    }
    if (f1 == NULL) {                    // после попытки открытия проверить успешность
        std::cout << "File2 open error\n";
        return -1;
    }
    std::cout << "File1 was opened\n";
    std::cout << "File2 was opened\n\n";

    fputs("Hello, world\n", f);          // запись строки в файл
    fputs("Hello, people\n", f);         // запись строки в файл
    fputs("How are you?", f);            // запись строки в файл       
    fflush(f);                           // когда все отправлено в буфер -записать в файл
                                         
    fputs("Hello, world\n", f1);         // запись строки в файл
    fputs("Hello, children\n", f1);      // запись строки в файл
    fputs("How are you?", f1);           // запись строки в файл
    fflush(f1);                          // когда все отправлено в буфер -записать в файл

    char str[100];
    char str1[100];

    while (!feof(f) && !feof(f1)) {      // проверка EndOfFile
        
        fgets(str, 100, f);
        fgets(str1, 100, f1);

        if (_stricmp(str, str1) != 0) {  // сравнение строк
            std::cout 
                << "A different string in file1: " << str 
                << "A different string in file2: " << str1 
                << std::endl;
        }     
    }     
    fclose(f);                           // закрываем файл, освобождаем системный ресурс
    fclose(f1);
    
    return 0;
}

/*
 Завдання 2. Дан текстовий файл. Необхідно створити
 новий файл і записати в нього таку статистику по вихідному файлу:
 ■ Кількість символів;
 ■ Кількість рядків;
 ■ Кількість голосних;
 ■ Кількість приголосних;
 ■ Кількість цифр.
*/
int main2() {
    FILE* f3;
    FILE* f2;

    f3 = fopen("file_count.txt", "rt");         // открытие файла 
    f2 = fopen("file_two.txt", "wt");           // открытие файла 

    if (f3 == NULL) {                           // после попытки открытия проверить успешность
        std::cout << "File open error\n";
        return -1;
    }
    if (f2 == NULL) {                           // после поывтки открытия проверить успешность
        std::cout << "File_one open error\n";
        return -1;
    }
    //std::cout << "File was opened\n";

    
   /* 
    fputs("Hello, world\n", f3);                // запись строки в файл
    fputs("Hello, people\n", f3);               // запись строки в файл
    fputs("Give me 2 apples", f3);              // запись строки в файл       
    fflush(f3);                                 // когда все отправлено в буфер -записать в файл
    */
     

    const size_t SIZE = 50;                     // переменная для макс размера строки
    char str[SIZE];
    
    char vowels[5] = 
    { 'a', 'e', 'i', 'o', 'u' };                // массив для гласных букв

    int symbol = 0;                             // накопительная переменная для символов
    int rows = 0;                               // накопительная переменная для строк
    int vowel = 0;                              // накопительная переменная для гласных
    int consonant = 0;                          // накопительная переменная для согласных
    int digit = 0;                              // накопительная переменная для цифр
    int letter = 0;                             // накопительная переменная для букв

    fgets(str, SIZE, f3);                                           // считываем строки
    while (!feof(f3)) {                                             // цикл до последней строки        
        size_t length = strlen(str);                                // длина строки
        for (size_t i = 0; i <= length; i++) {                      // цикл по строкам
            if (int(str[i]) >= 32 && int(str[i]) <= 126) {          // диапазон ASCII 65-90 - символы (до конца алфавита)
                symbol++;                                           // увеличиваем кол-во символов
            }
            
            if ((int(str[i]) >= 65 && int(str[i]) <= 90) ||         // диапазон ASCII 65-90 - буква заглавная
                (int(str[i]) >= 97 && int(str[i]) <= 122))          // диапазон ASCII 97-122 - буква прописная
            {
                letter++;                                           // увеличиваем кол-во букв
                for (size_t j = 0; j < 6; j++)                      // цикл по гласным
                {
                    if ((int(str[i]) == int(vowels[j])) ||          // для прописных из массива
                        (int(str[i]) == int(vowels[j] - 32))) {     // -32 для заглавных
                        vowel++;                                    // увеличиваем кол-во гласных
                    }
                }                                                                  
            }
            consonant = letter - vowel;                             // кол-во согласных

            if (int(str[i]) >= 48 && int(str[i]) <= 57) {           // диапазон ASCII 48-57 - цифры
                digit++;                                            // увеличиваем кол-во цифр
            }          
        }
        rows += 1;                                                  // увеличиваем кол-во строк
        fgets(str, SIZE, f3);

    }
                  
    fprintf(f2, "Characters = %d\n", symbol);                       // запись результатов в файл                     
    fprintf(f2, "Rowes = %d\n", rows);                              // запись результатов в файл
    fprintf(f2, "Vowels = %d\n", vowel);                            // запись результатов в файл
    fprintf(f2, "Consonants = %d\n", consonant);                    // запись результатов в файл
    fprintf(f2, "Digits = %d\n", digit);                            // запись результатов в файл
    fflush(f2);                                                     // когда все отправлено в буфер - записать в файл

    fclose(f3);                                                     // закрываем файлы - освобождаем системный ресурс                                                     
    fclose(f2);

    return 0;
}

/*

Завдання 3. Шифрування Цезаря — один із найдавніших
шифрів. При шифруванні кожен символ замінюється іншим, віддаленим від 
нього в алфавіті на фіксоване число позицій.
Приклад
■ Шифрування з використанням ключа: 3.

■ Дан текстовий файл. Зашифрувати його, використовуючи шифрування Цезаря.
Результат записати в інший файл.
Оригінальний текст: У ґазди є ж бо гевеї, які шиють
прості килими, наче хащі фацелій.
Шифрований текст: Ц єгїжй и і ґс ездзл, внк юйбха
тусфхк нйойпй, ргьз шгяк чгщзокм.
■ Дан текстовий файл. Зашифрувати його, використовуючи шифрування Цезаря. Результат записати в
інший файл.
*/

int main() {
    FILE* fa;
    FILE* fb;

    fa = fopen("shifr.txt", "rt");                  // открытие файла 
    fb = fopen("shifr_new.txt", "wt");              // открытие файла 

    if (fa == NULL) {                               // после попытки открытия проверить успешность
        std::cout << "File open error\n";
        return -1;
    }
    if (fb == NULL) {                               // после поывтки открытия проверить успешность
        std::cout << "File_one open error\n";
        return -1;
    }
    const size_t size = 50;                         // макс длина строки
    char str[size];                                 // буфер для строки
    int k = 3;                                      // ключ шифрования (кол-во шагов смещения)

    while (!feof(fa)) {                             // цикл, пока не конец файла
        fgets(str, size, fa);                       // считываем символы 
        size_t length = strlen(str);                // длина строки
        for (size_t i = 0; i < length; i++) {
            if (str[i] >= 65 && str[i] <= 90)       // диапазон ASCII 65-90 - буква заглавная
                str[i] = (str[i]  + k);             // смещаем букву на 3 вперед
            else if 
                (str[i] >= 97 && str[i] <= 122)     // диапазон ASCII 97-122 - буква прописная
                str[i] = (str[i]  + k);             // смещаем букву на 3 вперед
        }
        fputs(str, fb);                             // запись зашифрованной строки в файл
    }
                                                    // закрываем файлы - освобождаем системный ресурс
    fflush(fb);

    fclose(fa);                                     // закрываем файлы - освобождаем системный ресурс                                                     
    fclose(fb);

    return 0;
}
